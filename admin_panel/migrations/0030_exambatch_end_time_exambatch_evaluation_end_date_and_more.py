# Generated by Django 5.0.4 on 2024-11-26 08:30

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("admin_panel", "0029_exambatch_examstudent"),
    ]

    operations = [
        migrations.AddField(
            model_name="exambatch",
            name="end_time",
            field=models.TimeField(default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="exambatch",
            name="evaluation_end_date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="exambatch",
            name="evaluation_end_time",
            field=models.TimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="exambatch",
            name="evaluation_start_date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="exambatch",
            name="evaluation_start_time",
            field=models.TimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="exambatch",
            name="mode",
            field=models.CharField(
                choices=[
                    ("CENTER_BASED", "Center Based Test"),
                    ("INTERNET_BASED", "Internet Based Test"),
                    ("INTERNET_BASED_HYBRID", "Internet Based Test (Hybrid)"),
                    ("PAPER_BASED_OSM", "Paper Based Test (OSM)"),
                    ("PAPER_BASED_OMR", "Paper Based Test (OMR)"),
                    ("PAPER_BASED_ATTACHMENT", "Paper Based Test (Attachment Type)"),
                ],
                default="PAPER_BASED_OSM",
                help_text="Type of examination mode",
                max_length=50,
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="exambatch",
            name="start_time",
            field=models.TimeField(default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="exambatch",
            name="end_date",
            field=models.DateField(default="2024-01-01"),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="exambatch",
            name="start_date",
            field=models.DateField(default="2024-01-01"),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="EvaluatorSettings",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "photo_capture_interval",
                    models.IntegerField(
                        blank=True,
                        help_text="Evaluator photo capture interval in minutes",
                        null=True,
                    ),
                ),
                ("daily_evaluation_limit", models.IntegerField(blank=True, null=True)),
                (
                    "attentive_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("evaluation_instructions", models.TextField(blank=True, null=True)),
                (
                    "exam_batch",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evaluator_settings",
                        to="admin_panel.exambatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Evaluator Settings",
                "verbose_name_plural": "Evaluator Settings",
            },
        ),
        migrations.CreateModel(
            name="ExamBatchSettings",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("show_scientific_calculator", models.BooleanField(default=False)),
                ("activity_log", models.BooleanField(default=False)),
                ("is_submit_enable", models.BooleanField(default=True)),
                ("lock_screen", models.BooleanField(default=False)),
                (
                    "maximum_question_attempt",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "test_download_password",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "essay_question_time_limit",
                    models.DurationField(blank=True, null=True),
                ),
                ("minimum_question_time", models.DurationField(blank=True, null=True)),
                (
                    "late_login_time",
                    models.IntegerField(
                        blank=True, help_text="Late login time in minutes", null=True
                    ),
                ),
                ("mandatory_attempt_all", models.BooleanField(default=False)),
                ("enable_backward_forward", models.BooleanField(default=True)),
                ("section_instructions", models.BooleanField(default=False)),
                ("topic_attempt_limits", models.BooleanField(default=False)),
                ("section_wise_break", models.BooleanField(default=False)),
                (
                    "exam_batch",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings",
                        to="admin_panel.exambatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Exam Batch Settings",
                "verbose_name_plural": "Exam Batch Settings",
            },
        ),
        migrations.CreateModel(
            name="InternetBasedSettings",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("secure_browser", models.BooleanField(default=False)),
                ("warning_enabled", models.BooleanField(default=False)),
                ("allow_proctoring", models.BooleanField(default=False)),
                ("image_based_proctoring", models.BooleanField(default=False)),
                ("video_based_proctoring", models.BooleanField(default=False)),
                ("multi_factor_authentication", models.BooleanField(default=False)),
                (
                    "authentication_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("AADHAR", "Aadhar Card"),
                            ("PAN", "PAN Card"),
                            ("VOTER_ID", "Voter ID"),
                            ("DRIVING_LICENSE", "Driving License"),
                        ],
                        help_text="Type of authentication required",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("group_questions_by_subject", models.BooleanField(default=False)),
                ("allow_back_forward", models.BooleanField(default=False)),
                ("show_default_calculator", models.BooleanField(default=False)),
                ("show_scientific_calculator", models.BooleanField(default=False)),
                ("multilingual_test_design", models.BooleanField(default=False)),
                ("all_questions_attempt_mandatory", models.BooleanField(default=False)),
                ("randomize_answer_options", models.BooleanField(default=False)),
                ("show_marks_points", models.BooleanField(default=False)),
                (
                    "exam_batch",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="internet_settings",
                        to="admin_panel.exambatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Internet Based Settings",
                "verbose_name_plural": "Internet Based Settings",
            },
        ),
        migrations.CreateModel(
            name="ModeratorSettings",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("is_enabled", models.BooleanField(default=False)),
                (
                    "assigned_moderator_count",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "scripts_allocation_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of scripts allocated to moderator",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("assign_fresh_script", models.BooleanField(default=False)),
                (
                    "exam_batch",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="moderator_settings",
                        to="admin_panel.exambatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Moderator Settings",
                "verbose_name_plural": "Moderator Settings",
            },
        ),
        migrations.CreateModel(
            name="PaperBasedSettings",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("partial_result_publish", models.BooleanField(default=False)),
                (
                    "passing_marks",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("allow_grace_marks", models.BooleanField(default=False)),
                ("upload_sample_answer_sheet", models.BooleanField(default=False)),
                (
                    "exam_batch",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="paper_settings",
                        to="admin_panel.exambatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Paper Based Settings",
                "verbose_name_plural": "Paper Based Settings",
            },
        ),
        migrations.CreateModel(
            name="ScannerSettings",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("is_enabled", models.BooleanField(default=False)),
                (
                    "minimum_script_scanning_page_limit",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "exam_batch",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scanner_settings",
                        to="admin_panel.exambatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Scanner Settings",
                "verbose_name_plural": "Scanner Settings",
            },
        ),
        migrations.CreateModel(
            name="SelectionCriteria",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "criteria_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("OVERALL", "Overall"),
                            ("SECTION", "Section"),
                            ("SUBJECT", "Subject"),
                        ],
                        help_text="Type of criteria",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "operator",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LT", "<"),
                            ("LTE", "<="),
                            ("GT", ">"),
                            ("GTE", ">="),
                            ("EQ", "="),
                        ],
                        help_text="Comparison operator",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Criteria value (e.g., 95%)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "logical_operator",
                    models.CharField(
                        blank=True,
                        choices=[("AND", "AND"), ("OR", "OR")],
                        help_text="Logical operator for combining criteria",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "exam_batch",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="selection_criteria",
                        to="admin_panel.exambatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Selection Criteria",
                "verbose_name_plural": "Selection Criteria",
            },
        ),
    ]
